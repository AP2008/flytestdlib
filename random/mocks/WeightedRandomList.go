// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import rand "math/rand"
import random "github.com/lyft/flytestdlib/random"

// WeightedRandomList is an autogenerated mock type for the WeightedRandomList type
type WeightedRandomList struct {
	mock.Mock
}

// Get provides a mock function with given fields:
func (_m *WeightedRandomList) Get() random.Comparable {
	ret := _m.Called()

	var r0 random.Comparable
	if rf, ok := ret.Get(0).(func() random.Comparable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(random.Comparable)
		}
	}

	return r0
}

// GetWithSeed provides a mock function with given fields: seed
func (_m *WeightedRandomList) GetWithSeed(seed rand.Source) (random.Comparable, error) {
	ret := _m.Called(seed)

	var r0 random.Comparable
	if rf, ok := ret.Get(0).(func(rand.Source) random.Comparable); ok {
		r0 = rf(seed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(random.Comparable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rand.Source) error); ok {
		r1 = rf(seed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Len provides a mock function with given fields:
func (_m *WeightedRandomList) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *WeightedRandomList) List() []random.Comparable {
	ret := _m.Called()

	var r0 []random.Comparable
	if rf, ok := ret.Get(0).(func() []random.Comparable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]random.Comparable)
		}
	}

	return r0
}
